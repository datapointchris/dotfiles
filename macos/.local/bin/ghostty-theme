#!/usr/bin/env bash
# Ghostty theme switcher with random and fzf selection support

set -euo pipefail

GHOSTTY_CONFIG="$HOME/.config/ghostty/config"
THEMES_FILE="$HOME/.config/ghostty/favorite-themes.txt"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to display usage
usage() {
    cat <<EOF
Usage: ghostty-theme [OPTION]

Manage Ghostty terminal themes.

OPTIONS:
    -r, --random    Select a random theme from favorites
    -s, --select    Use fzf to interactively select a theme
    -l, --list      List all favorite themes
    -c, --current   Show currently active theme
    -h, --help      Show this help message

EXAMPLES:
    ghostty-theme --random      # Apply a random theme
    ghostty-theme --select      # Pick theme with fzf
    ghostty-theme --list        # Show favorite themes
    ghostty-theme --current     # Show active theme

EOF
    exit 0
}

# Read themes from file (skip comments and empty lines)
read_themes() {
    # Check if themes file exists
    if [[ ! -f "$THEMES_FILE" ]]; then
        echo -e "${RED}Error: Themes file not found at $THEMES_FILE${NC}" >&2
        exit 1
    fi
    grep -v '^#' "$THEMES_FILE" | grep -v '^[[:space:]]*$' || true
}

# Get current theme from config
get_current_theme() {
    grep '^theme = ' "$GHOSTTY_CONFIG" | tail -n1 | sed 's/^theme = //' || echo "No theme set"
}

# List all favorite themes
list_themes() {
    echo -e "${BLUE}Favorite Ghostty Themes:${NC}"
    echo ""
    read_themes | nl -w2 -s'. '
}

# Show current theme
show_current() {
    local current
    current=$(get_current_theme)
    echo -e "${GREEN}Current theme:${NC} $current"
}

# Apply a theme to ghostty config
apply_theme() {
    local theme="$1"

    # Resolve symlink to get the actual file path
    local config_file
    config_file=$(readlink -f "$GHOSTTY_CONFIG" 2>/dev/null || realpath "$GHOSTTY_CONFIG" 2>/dev/null || echo "$GHOSTTY_CONFIG")

    # Check if there's already a theme line
    if grep -q "^theme = " "$config_file"; then
        # Replace existing theme line
        sed -i.bak "s/^theme = .*/theme = $theme/" "$config_file"
        rm -f "${config_file}.bak"
    else
        # Add theme line at the top with a note
        local temp_file
        temp_file=$(mktemp)
        {
            echo "# Theme (only one theme line should be set)"
            echo "theme = $theme"
            echo ""
            cat "$config_file"
        } > "$temp_file"
        cat "$temp_file" > "$config_file"
        rm -f "$temp_file"
    fi

    echo -e "${GREEN}✓${NC} Applied theme: ${YELLOW}$theme${NC}"
    echo -e "${BLUE}→${NC} Press ${YELLOW}Cmd+Shift+,${NC} to reload config"
}

# Select random theme
random_theme() {
    local themes
    mapfile -t themes < <(read_themes)

    if [[ ${#themes[@]} -eq 0 ]]; then
        echo -e "${RED}Error: No themes found in $THEMES_FILE${NC}" >&2
        exit 1
    fi

    local random_index=$((RANDOM % ${#themes[@]}))
    local selected_theme="${themes[$random_index]}"

    echo -e "${BLUE}Randomly selected:${NC} $selected_theme"
    apply_theme "$selected_theme"
}

# Open a preview window with the theme
open_theme_preview() {
    local theme="$1"

    # Create temporary config file
    local temp_config
    temp_config=$(mktemp)

    # Copy main config and set the preview theme
    cat "$GHOSTTY_CONFIG" | sed 's/^theme = /# theme = /' > "$temp_config"
    echo "theme = $theme" >> "$temp_config"

    # Open new Ghostty instance with preview
    open -na Ghostty.app --args --config-file="$temp_config" -e bash -c "
        clear
        echo -e '\n\033[1;36m╔══════════════════════════════════════════════════════════╗\033[0m'
        echo -e '\033[1;36m║\033[0m                                                          \033[1;36m║\033[0m'
        echo -e '\033[1;36m║\033[0m  \033[1;33mTHEME PREVIEW:\033[0m $theme'
        echo -e '\033[1;36m║\033[0m                                                          \033[1;36m║\033[0m'
        echo -e '\033[1;36m╚══════════════════════════════════════════════════════════╝\033[0m\n'

        if command -v printcolors &> /dev/null; then
            printcolors
        fi

        echo -e '\n\033[1;32mSample Code:\033[0m'
        echo -e '\033[32mfunction\033[0m \033[33mhello\033[0m() {'
        echo -e '  \033[34mecho\033[0m \033[36m\"Hello, World!\"\033[0m'
        echo -e '}'
        echo -e '\n\033[90m# This is a comment\033[0m'
        echo -e '\033[35mconst\033[0m result = \033[33mcalculate\033[0m(\033[96m42\033[0m);'

        echo -e '\n\033[1;33m─────────────────────────────────────────────────────────\033[0m'
        echo -e '\033[1;33mClose this window when done previewing\033[0m'
        echo -e '\033[1;33m─────────────────────────────────────────────────────────\033[0m\n'

        bash
        rm -f '$temp_config'
    " 2>/dev/null &
}

# Create preview content for fzf (internal use)
preview_theme() {
    local theme="$1"

    cat <<EOF

  ╔════════════════════════════════════════════════════════════╗
  ║                                                            ║
  ║  THEME: ${theme}
  ║                                                            ║
  ╚════════════════════════════════════════════════════════════╝


  PREVIEW OPTIONS
  ────────────────────────────────────────────────────────────

  Press Ctrl+P to open a LIVE PREVIEW window with this theme
  (Shows actual theme colors in a new Ghostty window)


  QUICK REFERENCE
  ────────────────────────────────────────────────────────────

  • ENTER    → Apply theme (Cmd+Shift+, to reload)
  • ESC      → Cancel without changes
  • Ctrl+P   → Open live preview window
  • ↑/↓      → Navigate themes


  TIP: Use random mode to quickly test themes
  ────────────────────────────────────────────────────────────

    ghostty-theme --random

  Applies a random theme from your favorites!

EOF
}

# Select theme with fzf
select_theme() {
    if ! command -v fzf &> /dev/null; then
        echo -e "${RED}Error: fzf is not installed${NC}" >&2
        echo "Install with: brew install fzf"
        exit 1
    fi

    local current
    current=$(get_current_theme)

    # Get the script path for preview
    local script_path="$0"

    # Clear screen before fzf to prevent escape sequence leakage
    clear

    local selected_theme
    selected_theme=$(read_themes | fzf \
        --prompt="Select Ghostty Theme > " \
        --header="Current: $current | Ctrl+P: Live Preview | Enter: Apply | Esc: Cancel" \
        --height=100% \
        --border=rounded \
        --reverse \
        --ansi \
        --preview="$script_path --preview {}" \
        --preview-window=right:60%:wrap \
        --color='border:dim,preview-border:dim' \
        --bind="ctrl-p:execute($script_path --open-preview {})" \
        --bind='ctrl-c:abort,esc:abort' \
        --no-mouse)

    # Clear any remaining escape sequences
    printf '\033[0m'

    if [[ -z "$selected_theme" ]]; then
        echo -e "${YELLOW}No theme selected${NC}"
        exit 0
    fi

    apply_theme "$selected_theme"
}

# Parse arguments
if [[ $# -eq 0 ]]; then
    usage
fi

case "$1" in
    -r|--random)
        random_theme
        ;;
    -s|--select)
        select_theme
        ;;
    -l|--list)
        list_themes
        ;;
    -c|--current)
        show_current
        ;;
    --preview)
        # Internal use only - for fzf text preview
        if [[ -n "$2" ]]; then
            preview_theme "$2"
        fi
        ;;
    --open-preview)
        # Internal use only - for fzf live preview window
        if [[ -n "$2" ]]; then
            open_theme_preview "$2"
        fi
        ;;
    -h|--help)
        usage
        ;;
    *)
        echo -e "${RED}Error: Unknown option: $1${NC}" >&2
        echo ""
        usage
        ;;
esac
