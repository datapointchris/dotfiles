# Key Binding Notations:
# C = Ctrl
# M = Cmd-Option

# Key Binding Commands:
# bind -n [key] [command]: Bind a key without needing the tmux prefix.
# bind -r [key] [command]: Bind a key with repeat mode, so you only need to press the prefix once for repeated actions.
# bind -T [table] [key] [command]: Bind a key in a specific key table (e.g., copy-mode-vi).
# bind [key] [command]: Bind a key with the tmux prefix.
# bind-key [key] [command]: Alias for bind, used interchangeably.

# Option Setting Commands:
# setw [option] [value]: Set a window-specific option.
# set [option] [value]: Set a session-specific option.
# set-option [option] [value]: Alias for set, used interchangeably.
# set -g [option] [value]: Set a global option that applies to all sessions.

# Notes:
# - The 'bind' and 'bind-key' commands are used to create key bindings.
# - The 'setw', 'set', 'set-option', and 'set -g' commands are used to configure tmux options.
# - 'set -g' is commonly used to set global options that affect all tmux sessions.
# - 'setw' is used for options that are specific to individual windows.
# - 'bind -n' is useful for creating key bindings that do not require the tmux prefix key.
# - 'bind -r' allows for repeated key presses without needing to re-enter the prefix key.
# - 'bind -T' is used to bind keys within specific key tables, such as copy-mode or copy-mode-vi.

# Example Usage:
# bind -n C-t new-window: Create a new window with Ctrl-t without needing the prefix.
# bind -r C-a next-window: Switch to the next window with Ctrl-a, allowing repeated presses.
# bind -T copy-mode-vi v send -X begin-selection: Bind 'v' in copy-mode-vi to begin selection.
# setw -g mode-keys vi: Use vi keybindings in copy mode.
# set -g mouse on: Enable mouse mode globally.
# set-option -g prefix C-Space: Set the tmux prefix to Ctrl-Space globally.

## Do NOT need to use 'reattach-to-user-namespace', that was for < 2.6


################################################################################
#                             GENERAL SETTINGS                                 #
################################################################################

# Use vi keybindings
setw -g mode-keys vi

# Enable mouse mode
set -g mouse on

# Set the default terminal mode to 256color mode
set -g default-terminal "screen-256color"

# set terminal title
set-option -g set-titles on

# set title to the same for better iterm2 integration
set-option -g set-titles-string "#T"

set -g history-limit 100000

# In tmux, the escape-time option controls the amount of time tmux waits after seeing an escape character
# before deciding that it is not part of an escape sequence.
# This is particularly relevant for distinguishing between key sequences and individual key presses.
# The default of 500ms is too long for using neovim inside tmux.
set-option -sg escape-time 10

# Focus events enabled for terminals that support them
set -g focus-events on

# Yazi image preview support
set -g allow-passthrough on
set -ga update-environment TERM
set -ga update-environment TERM_PROGRAM


################################################################################
#                          PREFIX KEY CONFIGURATION                            #
################################################################################

# remap prefix from "C-b" to "C-Space"
unbind C-b
unbind C-Space
unbind -T copy-mode C-Space
set-option -g prefix C-Space
bind C-Space send-prefix # to send to other programs


################################################################################
#                          RELOAD CONFIGURATION                                #
################################################################################

# source config file
unbind R
bind R source-file ~/.config/tmux/tmux.conf \; display-message "~/.config/tmux/tmux.conf reloaded."


################################################################################
#                                  WINDOWS                                     #
################################################################################

# start with window 1 (instead of 0)
set -g base-index 1

# dont rename windows automatically
set-option -g allow-rename off

# but renumber them
set-option -g renumber-windows on

# Change kill window keybinding
unbind &
bind k kill-window

# Swap windows
bind -r "<" swap-window -d -t -1
bind -r ">" swap-window -d -t +

# Navigate windows (directional)
bind h previous-window
bind l next-window

# watch windows for activity
set-window-option -g monitor-activity on

# display message instead of sending a bell alert
set -g visual-activity on


################################################################################
#                                   PANES                                      #
################################################################################

# start with pane 1
set -g pane-base-index 1

# Enable names for panes
set -g pane-border-status top

# split panes using | (vertical split) and - (horizontal split)
unbind '|'
bind-key '|' split-window -h -c "#{pane_current_path}"
unbind '-'
bind-key '-' split-window -v -c "#{pane_current_path}"
unbind '"'
unbind %

# Resize the current pane using Ctrl + Alt + direction
bind-key -n C-M-k resize-pane -U 5
bind-key -n C-M-j resize-pane -D 5
bind-key -n C-M-h resize-pane -L 5
bind-key -n C-M-l resize-pane -R 5


################################################################################
#                  PANE NAVIGATION (VIM-TMUX INTEGRATION)                      #
################################################################################

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?|fzf)(diff)?$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
bind-key -n 'C-\' if-shell "$is_vim" 'send-keys C-\\'  'select-pane -l'

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R


################################################################################
#                         COPY MODE & CLIPBOARD                                #
################################################################################

set -g set-clipboard on
# unbind [
# bind Escape copy-mode
bind P paste-buffer

bind -T copy-mode-vi 'v' send-keys -X begin-selection     # Begin selection in copy mode.
bind -T copy-mode-vi 'C-v' send-keys -X rectangle-toggle  # Begin selection in copy mode.
bind -T copy-mode-vi 'y' send-keys -X copy-pipe-and-cancel "pbcopy" # Yank selection in copy mode.
bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "pbcopy"
# bind -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "pbcopy"


################################################################################
#                               COLOR SCHEME                                   #
################################################################################

DARK_GRAY="#1d1f21" # Dark Jungle Green (Dark Gray)
MEDIUM_GRAY="#2d2d2d" # Charleston Green (Medium Gray)
MEDIUM_LIGHT_GRAY="#373b41" # Onyx (Med-Light Gray)
LIGHT_GRAY="#969896" # Spanish Gray (Light Gray)
SILVER="#c5c8c6"
RED="#c90d00"
GREEN="#60b45a"
ORANGE="#f79802"
YELLOW="#c09c24"
BRIGHT_YELLOW="#ffc400"
BLUE="#149cc4"
BLUE="#4eb6fe"
BLACK="#111111"

BG_COLOR="$MEDIUM_GRAY"
BG_COLOR_ACTIVE="$DARK_GRAY"

CARET="\u276f"  # ❯ symbol

# highlight active pane (even though it says window-style)
setw -g window-style bg=$BG_COLOR_ACTIVE
setw -g window-active-style bg=$BG_COLOR_ACTIVE

# border style and name
# NOTE: there is no pane-active-border-format in tmux, one format applies to both active and non-active.
set -g pane-border-style fg=$LIGHT_GRAY,bg=$BG_COLOR_ACTIVE
set -g pane-active-border-style fg=$YELLOW,bg=$BG_COLOR_ACTIVE
set -g pane-border-format "  #[align=left](#{pane_index})  #[fg=$BLUE,align=centre]  #{pane_current_command}  #[fg=$BRIGHT_YELLOW,align=right]  #{pane_current_path}  "

set -g pane-border-lines double

# message bar where "reloaded .tmux.conf" displays at bottom
# in place of status bar
set -g message-style fg=$YELLOW,bg=$DARK_GRAY
set -g display-time 2000

# when in command mode with prefix + :
set -g message-command-style fg=$YELLOW,bg=$BG_COLOR_ACTIVE

# Line numbers in top right of pane when scrolling
set -g mode-style fg=$GREEN,bg=$BG_COLOR_ACTIVE


################################################################################
#                                STATUS BAR                                    #
################################################################################

# Variables
# #H Hostname of local host
# #h Hostname of local host without the domain name
# #F Current window flag
# #I Current window index
# #P Current pane index
# #S Current session name
#
# #P Current pane index
# #S Current session name
# #T Current window title
# #W Current window name
# ## A literal #
# #(shell-command) First line of the shell command's output
# #[attributes] Color or attribute change

# Layout:
# {1 window-name} | {2 window-name}        {cpu} | {ram} | {time} | {date}

# Put Status Bar on Top
set -g status-position top

# Super useful when using "grouped sessions" and multi-monitor setup
# NOT compatible with iterm2 -> must turn off if using iterm2 tmux integration (I am not)
setw -g aggressive-resize on

# Set status bar to two lines with blank on top for padding

# set status bar
set -g status-style bg=$BG_COLOR_ACTIVE

# left status: session user@host
set -g status-left " #[fg=$GREEN]  "
set -g status-left-length 100

## Window List on Status Bar ##
# Not Selected Window
set-window-option -g window-status-style fg=$LIGHT_GRAY,bg=$BG_COLOR_ACTIVE
set-window-option -g window-status-format "   #I #W   "

# Current Window
set-window-option -g window-status-current-style fg=$ORANGE,bg=$BLACK
set-window-option -g window-status-current-format "   $CARET #I #W   "

# Last Window Visited
set-window-option -g window-status-last-style fg=$SILVER,bg=$BG_COLOR

# Highlight activity in status bar
set-window-option -g window-status-activity-style fg=$RED,bg=$BG_COLOR

# Window status separator
set-window-option -g window-status-separator "|"

# right status: CPU | RAM | clock | date
set -g @cpu_low_fg_color "#[fg=$GREEN]"
set -g @ram_low_fg_color "#[fg=$GREEN]"
set -g @cpu_medium_fg_color "#[fg=$YELLOW]"
set -g @ram_medium_fg_color "#[fg=$YELLOW]"
set -g @cpu_high_fg_color "#[fg=$RED]"
set -g @ram_high_fg_color "#[fg=$RED]"
set -g status-right-length 100
set -g status-right "#[bg=$BG_COLOR_ACTIVE]#{cpu_fg_color}CPU:#{cpu_icon} #{ram_fg_color}RAM:#{ram_icon}  #[fg=$LIGHT_GRAY]%I:%M%p  #[fg=$LIGHT_GRAY]%m.%d.%Y"


################################################################################
#                          SPECIAL KEYBINDINGS                                 #
################################################################################

# Set popup window to show keybindings for tmux
# Must source the functions to get them in this popup
bind C-p display-popup -w 50% -h 98% -E "source ~/.shell/formatting.sh; source ~/.shell/functions.sh; lstmux; read -n 1"

# Use cht.sh with fzf to get docs output into neovim
# The popup is called in the script since there needs to be some preprocessing
bind i run-shell "tmux neww ~/.local/bin/doc"

# Edit dotfiles quickly
bind C-n display-popup -w 90% -h 90% -E "nvim ~/dotfiles"

# Ask Claude quick questions
bind C-g display-popup -w 90% -h 90% -E 'claude'

# Open projects quickly
bind d display-menu -T "#[align=centre]Projects" -x C -y C \
  "TODO"      t  "display-popup -E 'nvim TODO || nvim TODO.md || nvim ~/TODO.md'" \
  "ICB"       c  "display-popup -E 'nvim ~/code/ichrisbirch'" \
  "Dotfiles"  d  "display-popup -E 'nvim ~/dotfiles'" \
  "Notes"     n  "display-popup -E 'nvim ~/Documents/notes" \
  "Exit"      q  ""


################################################################################
#                                 PLUGINS                                      #
################################################################################

XDG_CONFIG_HOME_TMUX_PLUGINS_DIR="$HOME/.config/tmux/plugins"

# Tmux Plugin Manager
set -g @plugin 'tmux-plugins/tpm'

# Show computer info in status bar
set -g @plugin 'tmux-plugins/tmux-cpu'

# Makes tree sidebar available in tmux
set -g @plugin 'tmux-plugins/tmux-sidebar'
# Colorize tree
set -g @sidebar-tree-command "tree -C"

# Show keybindings in tmux
set -g @plugin 'alexwforsythe/tmux-which-key'

# Copy between system and tmux clipboard
set -g @plugin 'tmux-plugins/tmux-yank'

# Keeps Tmux session alive through restart
set -g @plugin 'tmux-plugins/tmux-resurrect'
# for neovim
set -g @resurrect-strategy-nvim 'session'

# Session management
set -g @plugin 'omerxx/tmux-sessionx'
set -g @sessionx-bind 's'
# Tmuxinator mode on
set -g @sessionx-tmuxinator-mode 'on'

# If XDG_CONFIG_HOME_TMUX_PLUGINS_DIR/tpm/tpm is not found, download it
if-shell '[ ! -d "$XDG_CONFIG_HOME_TMUX_PLUGINS_DIR/tpm" ]' {
    run-shell 'git clone https://github.com/tmux-plugins/tpm "$XDG_CONFIG_HOME_TMUX_PLUGINS_DIR/tpm" && $XDG_CONFIG_HOME_TMUX_PLUGINS_DIR/tpm/bin/install_plugins'
    }

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run-shell "$XDG_CONFIG_HOME_TMUX_PLUGINS_DIR/tpm/tpm"
